schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bribe {
  id: Bytes!
  gauge: Gauge!
  proposal: Bytes!
  bribeIdentifier: Bytes!
  rewardIdentifier: Bytes!
  token: Bytes!
  amount: BigInt!
  deadline: BigInt!
  briber: Bytes!
}

input Bribe_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gauge: String
  gauge_not: String
  gauge_gt: String
  gauge_lt: String
  gauge_gte: String
  gauge_lte: String
  gauge_in: [String!]
  gauge_not_in: [String!]
  gauge_contains: String
  gauge_contains_nocase: String
  gauge_not_contains: String
  gauge_not_contains_nocase: String
  gauge_starts_with: String
  gauge_starts_with_nocase: String
  gauge_not_starts_with: String
  gauge_not_starts_with_nocase: String
  gauge_ends_with: String
  gauge_ends_with_nocase: String
  gauge_not_ends_with: String
  gauge_not_ends_with_nocase: String
  gauge_: Gauge_filter
  proposal: Bytes
  proposal_not: Bytes
  proposal_gt: Bytes
  proposal_lt: Bytes
  proposal_gte: Bytes
  proposal_lte: Bytes
  proposal_in: [Bytes!]
  proposal_not_in: [Bytes!]
  proposal_contains: Bytes
  proposal_not_contains: Bytes
  bribeIdentifier: Bytes
  bribeIdentifier_not: Bytes
  bribeIdentifier_gt: Bytes
  bribeIdentifier_lt: Bytes
  bribeIdentifier_gte: Bytes
  bribeIdentifier_lte: Bytes
  bribeIdentifier_in: [Bytes!]
  bribeIdentifier_not_in: [Bytes!]
  bribeIdentifier_contains: Bytes
  bribeIdentifier_not_contains: Bytes
  rewardIdentifier: Bytes
  rewardIdentifier_not: Bytes
  rewardIdentifier_gt: Bytes
  rewardIdentifier_lt: Bytes
  rewardIdentifier_gte: Bytes
  rewardIdentifier_lte: Bytes
  rewardIdentifier_in: [Bytes!]
  rewardIdentifier_not_in: [Bytes!]
  rewardIdentifier_contains: Bytes
  rewardIdentifier_not_contains: Bytes
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  deadline: BigInt
  deadline_not: BigInt
  deadline_gt: BigInt
  deadline_lt: BigInt
  deadline_gte: BigInt
  deadline_lte: BigInt
  deadline_in: [BigInt!]
  deadline_not_in: [BigInt!]
  briber: Bytes
  briber_not: Bytes
  briber_gt: Bytes
  briber_lt: Bytes
  briber_gte: Bytes
  briber_lte: Bytes
  briber_in: [Bytes!]
  briber_not_in: [Bytes!]
  briber_contains: Bytes
  briber_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bribe_filter]
  or: [Bribe_filter]
}

enum Bribe_orderBy {
  id
  gauge
  gauge__id
  gauge__address
  proposal
  bribeIdentifier
  rewardIdentifier
  token
  amount
  deadline
  briber
}

type Bunni {
  id: Bytes!
  protocolFee: BigInt!
}

type BunniToken {
  id: Bytes!
  name: String!
  symbol: String!
  address: Bytes!
  decimals: BigInt!
  precision: BigInt!
  pool: Pool!
  tickLower: BigInt!
  tickUpper: BigInt!
  liquidity: BigInt!
  bunniKey: Bytes!
  positionKey: Bytes!
  collectedFeesToken0: BigInt!
  collectedFeesToken1: BigInt!
  gauge: Bytes!
}

input BunniToken_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  precision: BigInt
  precision_not: BigInt
  precision_gt: BigInt
  precision_lt: BigInt
  precision_gte: BigInt
  precision_lte: BigInt
  precision_in: [BigInt!]
  precision_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  bunniKey: Bytes
  bunniKey_not: Bytes
  bunniKey_gt: Bytes
  bunniKey_lt: Bytes
  bunniKey_gte: Bytes
  bunniKey_lte: Bytes
  bunniKey_in: [Bytes!]
  bunniKey_not_in: [Bytes!]
  bunniKey_contains: Bytes
  bunniKey_not_contains: Bytes
  positionKey: Bytes
  positionKey_not: Bytes
  positionKey_gt: Bytes
  positionKey_lt: Bytes
  positionKey_gte: Bytes
  positionKey_lte: Bytes
  positionKey_in: [Bytes!]
  positionKey_not_in: [Bytes!]
  positionKey_contains: Bytes
  positionKey_not_contains: Bytes
  collectedFeesToken0: BigInt
  collectedFeesToken0_not: BigInt
  collectedFeesToken0_gt: BigInt
  collectedFeesToken0_lt: BigInt
  collectedFeesToken0_gte: BigInt
  collectedFeesToken0_lte: BigInt
  collectedFeesToken0_in: [BigInt!]
  collectedFeesToken0_not_in: [BigInt!]
  collectedFeesToken1: BigInt
  collectedFeesToken1_not: BigInt
  collectedFeesToken1_gt: BigInt
  collectedFeesToken1_lt: BigInt
  collectedFeesToken1_gte: BigInt
  collectedFeesToken1_lte: BigInt
  collectedFeesToken1_in: [BigInt!]
  collectedFeesToken1_not_in: [BigInt!]
  gauge: Bytes
  gauge_not: Bytes
  gauge_gt: Bytes
  gauge_lt: Bytes
  gauge_gte: Bytes
  gauge_lte: Bytes
  gauge_in: [Bytes!]
  gauge_not_in: [Bytes!]
  gauge_contains: Bytes
  gauge_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BunniToken_filter]
  or: [BunniToken_filter]
}

enum BunniToken_orderBy {
  id
  name
  symbol
  address
  decimals
  precision
  pool
  pool__id
  pool__fee
  pool__tick
  pool__address
  pool__liquidity
  pool__sqrtPriceX96
  pool__token0
  pool__token1
  pool__token0Price
  pool__token1Price
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalVolumeToken0
  pool__totalVolumeToken1
  pool__totalFeesToken0
  pool__totalFeesToken1
  tickLower
  tickUpper
  liquidity
  bunniKey
  positionKey
  collectedFeesToken0
  collectedFeesToken1
  gauge
}

input Bunni_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bunni_filter]
  or: [Bunni_filter]
}

enum Bunni_orderBy {
  id
  protocolFee
}

scalar Bytes

type Gauge {
  id: Bytes!
  address: Bytes!
  bunniToken: BunniToken!
  bribes(skip: Int = 0, first: Int = 100, orderBy: Bribe_orderBy, orderDirection: OrderDirection, where: Bribe_filter): [Bribe!]!
}

input Gauge_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  bunniToken: String
  bunniToken_not: String
  bunniToken_gt: String
  bunniToken_lt: String
  bunniToken_gte: String
  bunniToken_lte: String
  bunniToken_in: [String!]
  bunniToken_not_in: [String!]
  bunniToken_contains: String
  bunniToken_contains_nocase: String
  bunniToken_not_contains: String
  bunniToken_not_contains_nocase: String
  bunniToken_starts_with: String
  bunniToken_starts_with_nocase: String
  bunniToken_not_starts_with: String
  bunniToken_not_starts_with_nocase: String
  bunniToken_ends_with: String
  bunniToken_ends_with_nocase: String
  bunniToken_not_ends_with: String
  bunniToken_not_ends_with_nocase: String
  bunniToken_: BunniToken_filter
  bribes_: Bribe_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Gauge_filter]
  or: [Gauge_filter]
}

enum Gauge_orderBy {
  id
  address
  bunniToken
  bunniToken__id
  bunniToken__name
  bunniToken__symbol
  bunniToken__address
  bunniToken__decimals
  bunniToken__precision
  bunniToken__tickLower
  bunniToken__tickUpper
  bunniToken__liquidity
  bunniToken__bunniKey
  bunniToken__positionKey
  bunniToken__collectedFeesToken0
  bunniToken__collectedFeesToken1
  bunniToken__gauge
  bribes
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: Bytes!
  fee: BigInt!
  tick: BigInt!
  address: Bytes!
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  token0: Bytes!
  token1: Bytes!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  totalValueLockedToken0: BigInt!
  totalValueLockedToken1: BigInt!
  totalVolumeToken0: BigInt!
  totalVolumeToken1: BigInt!
  totalFeesToken0: BigInt!
  totalFeesToken1: BigInt!
  bunniTokens(skip: Int = 0, first: Int = 100, orderBy: BunniToken_orderBy, orderDirection: OrderDirection, where: BunniToken_filter): [BunniToken!]!
}

input Pool_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  totalValueLockedToken0: BigInt
  totalValueLockedToken0_not: BigInt
  totalValueLockedToken0_gt: BigInt
  totalValueLockedToken0_lt: BigInt
  totalValueLockedToken0_gte: BigInt
  totalValueLockedToken0_lte: BigInt
  totalValueLockedToken0_in: [BigInt!]
  totalValueLockedToken0_not_in: [BigInt!]
  totalValueLockedToken1: BigInt
  totalValueLockedToken1_not: BigInt
  totalValueLockedToken1_gt: BigInt
  totalValueLockedToken1_lt: BigInt
  totalValueLockedToken1_gte: BigInt
  totalValueLockedToken1_lte: BigInt
  totalValueLockedToken1_in: [BigInt!]
  totalValueLockedToken1_not_in: [BigInt!]
  totalVolumeToken0: BigInt
  totalVolumeToken0_not: BigInt
  totalVolumeToken0_gt: BigInt
  totalVolumeToken0_lt: BigInt
  totalVolumeToken0_gte: BigInt
  totalVolumeToken0_lte: BigInt
  totalVolumeToken0_in: [BigInt!]
  totalVolumeToken0_not_in: [BigInt!]
  totalVolumeToken1: BigInt
  totalVolumeToken1_not: BigInt
  totalVolumeToken1_gt: BigInt
  totalVolumeToken1_lt: BigInt
  totalVolumeToken1_gte: BigInt
  totalVolumeToken1_lte: BigInt
  totalVolumeToken1_in: [BigInt!]
  totalVolumeToken1_not_in: [BigInt!]
  totalFeesToken0: BigInt
  totalFeesToken0_not: BigInt
  totalFeesToken0_gt: BigInt
  totalFeesToken0_lt: BigInt
  totalFeesToken0_gte: BigInt
  totalFeesToken0_lte: BigInt
  totalFeesToken0_in: [BigInt!]
  totalFeesToken0_not_in: [BigInt!]
  totalFeesToken1: BigInt
  totalFeesToken1_not: BigInt
  totalFeesToken1_gt: BigInt
  totalFeesToken1_lt: BigInt
  totalFeesToken1_gte: BigInt
  totalFeesToken1_lte: BigInt
  totalFeesToken1_in: [BigInt!]
  totalFeesToken1_not_in: [BigInt!]
  bunniTokens_: BunniToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  fee
  tick
  address
  liquidity
  sqrtPriceX96
  token0
  token1
  token0Price
  token1Price
  totalValueLockedToken0
  totalValueLockedToken1
  totalVolumeToken0
  totalVolumeToken1
  totalFeesToken0
  totalFeesToken1
  bunniTokens
}

type Query {
  bunni(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bunni
  bunnis(
    skip: Int = 0
    first: Int = 100
    orderBy: Bunni_orderBy
    orderDirection: OrderDirection
    where: Bunni_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bunni!]!
  bunniToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BunniToken
  bunniTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BunniToken_orderBy
    orderDirection: OrderDirection
    where: BunniToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BunniToken!]!
  gauge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Gauge
  gauges(
    skip: Int = 0
    first: Int = 100
    orderBy: Gauge_orderBy
    orderDirection: OrderDirection
    where: Gauge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Gauge!]!
  bribe(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bribe
  bribes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bribe_orderBy
    orderDirection: OrderDirection
    where: Bribe_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bribe!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  bunni(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bunni
  bunnis(
    skip: Int = 0
    first: Int = 100
    orderBy: Bunni_orderBy
    orderDirection: OrderDirection
    where: Bunni_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bunni!]!
  bunniToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BunniToken
  bunniTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BunniToken_orderBy
    orderDirection: OrderDirection
    where: BunniToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BunniToken!]!
  gauge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Gauge
  gauges(
    skip: Int = 0
    first: Int = 100
    orderBy: Gauge_orderBy
    orderDirection: OrderDirection
    where: Gauge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Gauge!]!
  bribe(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bribe
  bribes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bribe_orderBy
    orderDirection: OrderDirection
    where: Bribe_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bribe!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}